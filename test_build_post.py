#!/usr/bin/env python3
# test_build_post.py
# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç: —á–∏—Ç–∞–µ—Ç Google Sheet, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏+–≤–∫—É—Å—ã –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ—Å—Ç.
# –£–±–∏—Ä–∞–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫ –≤–∫—É—Å–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "VOZOL RAVE 40000 (Mango Peach)" -> "Mango Peach")

import json
import logging
import re
from pathlib import Path

import gspread

# --- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("test_build_post")

# --- –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON ---
def safe_load_json(path: Path, default):
    if not path.exists():
        logger.warning("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", path)
        return default
    try:
        text = path.read_text(encoding="utf-8").strip()
        if not text:
            logger.warning("–§–∞–π–ª %s –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", path)
            return default
        return json.loads(text)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON %s: %s. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", path, e)
        return default

# --- –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
CFG_PATH = Path("config.json")
if not CFG_PATH.exists():
    logger.error("config.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π –µ–≥–æ –∏ –∑–∞–ø–æ–ª–Ω–∏.")
    raise SystemExit(1)

cfg = json.loads(CFG_PATH.read_text(encoding="utf-8"))
creds_file = cfg.get("credentials_file", "credentials.json")
spreadsheet_key = cfg.get("spreadsheet_key")
sheet_name = cfg.get("sheet_name", "–û–î–ù–û–†–ê–ó–ö–ò")

if not spreadsheet_key:
    logger.error("–í config.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç spreadsheet_key.")
    raise SystemExit(1)

# --- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ JSON ---
templates = safe_load_json(Path(cfg.get("templates_file", "templates.json")), {
    "main_caption": "‚ùóÔ∏è–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–¢–ö–û–í‚ùóÔ∏è\n\nüí•{model}üí•\n\nüî•–¶–µ–Ω–∞: {price} zl üî•\nüëá –ó–∞–∫–∞–∑–∞—Ç—å üëá\nüì¶@Diana_Elfbarchiküì¶\n\nüí• üéâ–î–û–°–¢–ê–í–ö–ê –ë–ï–°–ü–õ–ê–¢–ù–û! üí• üéâ\nüì¶üöö–ü—Ä–∏ –ó–∞–∫–∞–∑–µ –æ—Ç 3—Ö —à—Ç—É–∫! üì¶üöö\n\nü§™–ê–ö–¢–£–ê–õ–¨–ù–û–ï –ù–ê–õ–ò–ß–ò–ïü§™\n\n{flavors}\n\n{contact_info}"
})
prices = safe_load_json(Path(cfg.get("prices_file", "prices.json")), {})
flavor_emojis = safe_load_json(Path(cfg.get("flavor_emojis_file", "flavor_emojis.json")), {})

# --- –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ---
try:
    gc = gspread.service_account(filename=creds_file)
    sh = gc.open_by_key(spreadsheet_key)
    ws = sh.worksheet(sheet_name)
    rows = ws.get_all_values()
    logger.info("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: %d", len(rows))
except Exception as e:
    logger.exception("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: %s", e)
    raise

# --- –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–æ–¥–µ–ª—è–º ---
groups = {}
current = None
header_skipped = False

for raw in rows:
    row = [c if c is not None else "" for c in raw] + [""] * (3 - len(raw))
    a0 = row[0].strip()
    a1 = row[1].strip()
    a2 = row[2].strip()

    if not (a0 or a1 or a2):
        continue

    if not header_skipped:
        header_up = " ".join([v.upper() for v in row[:3]])
        if "SKU" in header_up or "TITLE" in header_up or "AVAILABLE" in header_up:
            header_skipped = True
            continue
        header_skipped = True

    # –º–æ–¥–µ–ª—å-—Å—Ç—Ä–æ–∫–∞: A –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, B –ø—É—Å—Ç–æ => —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–æ–±—ã—á–Ω–æ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —è—á–µ–π–∫–∞)
    if a0 and not a1:
        current = a0
        groups.setdefault(current, [])
        logger.debug("–ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: %s", current)
        continue

    # –≤–∫—É—Å —Å–æ SKU –≤ –∫–æ–ª–æ–Ω–∫–µ A
    if re.match(r"^\d+", a0):
        if current is None:
            logger.warning("–í—Å—Ç—Ä–µ—á–µ–Ω –≤–∫—É—Å –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: %s / %s", a0, a1)
            current = "UNKNOWN"
            groups.setdefault(current, [])
        flavor_name = a1 or a0
        try:
            qty = int(float(a2)) if a2 else 0
        except Exception:
            m = re.search(r"\d+", a2 or "")
            qty = int(m.group()) if m else 0
        groups.setdefault(current, []).append((flavor_name, qty))
        continue

    # fallback: –µ—Å–ª–∏ B –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –≤–∫—É—Å
    if a1:
        if current is None:
            logger.warning("–í—Å—Ç—Ä–µ—á–µ–Ω –≤–∫—É—Å –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (fallback): %s / %s", a0, a1)
            current = "UNKNOWN"
            groups.setdefault(current, [])
        flavor_name = a1
        try:
            qty = int(float(a2)) if a2 else 0
        except Exception:
            m = re.search(r"\d+", a2 or "")
            qty = int(m.group()) if m else 0
        groups.setdefault(current, []).append((flavor_name, qty))
        continue

    logger.warning("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: %s", row)

if not groups:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    raise SystemExit(1)

logger.info("–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: %d", len(groups))

# --- helper: –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∫—É—Å–∞ (—É–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –ª–∏—à–Ω–µ–µ) ---
def clean_flavor_name(raw_flavor: str, model_name: str) -> str:
    if not raw_flavor:
        return ""

    s = raw_flavor.strip()

    # 1) –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ–±–∫–∏ ‚Äî –±–µ—Ä–µ–º —Å–∞–º—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∫–æ–±–∫—É
    m = re.findall(r'\(([^()]*)\)', s)
    if m:
        candidate = m[-1].strip()
    else:
        candidate = s

    candidate = candidate.strip()

    # 2) —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'ELF BAR', '1500', 'VOZOL', 'RAVE', '40000', '/')
    # —Ä–∞–∑–±–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ —Ç–æ–∫–µ–Ω—ã (–±—É–∫–≤—ã/—Å–ª–æ–≤–∞/—Ü–∏—Ñ—Ä—ã)
    model_tokens = re.split(r'[\s/\\\-\_]+', model_name.lower())
    # —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏ –æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å –º—É—Å–æ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    model_tokens = [t for t in model_tokens if t and len(t) >= 1]

    # –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —É–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (–≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
    cleaned = candidate
    for tok in sorted(model_tokens, key=lambda x: -len(x)):  # –¥–ª–∏–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏
        if not tok:
            continue
        # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —É–¥–∞–ª—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ä—è–¥–æ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/—Å–∫–æ–±–∫–∞–º–∏
        cleaned = re.sub(r'(?i)\b' + re.escape(tok) + r'\b', ' ', cleaned)

    # 3) —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–∫–æ–±–∫–∏, –¥–≤–æ–µ—Ç–æ—á–∏—è, –∫–∞–≤—ã—á–∫–∏ –∏ —Ç.–¥.
    cleaned = re.sub(r'[\(\)\[\]\{\}"‚Äú‚Äù¬´¬ª:\/\\_]+', ' ', cleaned)
    # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –≤–µ–¥—É—â–∏–µ/—Ö–≤–æ—Å—Ç–æ–≤—ã–µ –¥–µ—Ñ–∏—Å—ã/–∑–∞–ø—è—Ç—ã–µ
    cleaned = re.sub(r'[,;¬∑‚Ä¢]+', ' ', cleaned)
    cleaned = re.sub(r'\s+', ' ', cleaned).strip(" -‚Äì‚Äî\t\n\r ")

    # –µ—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç–æ ‚Äî –±–µ—Ä—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π candidate (–±–µ–∑ –º–æ–¥–µ–ª–∏-—É–¥–∞–ª–µ–Ω–∏–π)
    if not cleaned:
        cleaned = candidate.strip()

    # Title Case, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "ice" -> "Ice")
    cleaned = " ".join([w.capitalize() for w in cleaned.split()])

    return cleaned

# --- –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ ---
def get_flavor_emoji(flavor_name: str) -> str:
    key = (flavor_name or "").lower().strip()
    if not key:
        return ""
    # –ø—Ä—è–º–æ–π –º–∞—Ç—á
    if key in flavor_emojis:
        return flavor_emojis[key]
    # —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    key_clean = re.sub(r'[^a-z0-9\s]', '', key)
    if key_clean in flavor_emojis:
        return flavor_emojis[key_clean]
    # –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–ª–æ–≤–∞, 1 —Å–ª–æ–≤–æ)
    parts = key_clean.split()
    for n in (2, 1):
        if len(parts) >= n:
            k = " ".join(parts[-n:])
            if k in flavor_emojis:
                return flavor_emojis[k]
    # –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —ç–º–æ–¥–∑–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
    found = []
    for p in parts:
        if p in flavor_emojis:
            found.append(flavor_emojis[p])
    return " ".join(found)

def format_flavor_line(raw_flavor: str, available: int, model_name: str) -> str:
    clean_name = clean_flavor_name(raw_flavor, model_name)
    emoji = get_flavor_emoji(clean_name.lower())
    if emoji:
        return f"‚úÖ {clean_name} {emoji} ({available} —à—Ç.)"
    else:
        return f"‚úÖ {clean_name} ({available} —à—Ç.)"

# --- –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ ---
def normalize_model_key(name: str) -> str:
    s = (name or "").upper()
    s = re.sub(r"[^A-Z0-9%]", "", s)
    return s

def build_post_text(model_name: str, flavors):
    key = normalize_model_key(model_name)
    price = prices.get(key, "‚Äî")
    price_text = f"{price} zl" if price != "‚Äî" else "‚Äî"
    lines = [format_flavor_line(n, a, model_name) for n, a in sorted(flavors, key=lambda x:(-x[1], x[0]))]
    flavors_text = "\n".join(lines) if lines else "–ù–µ—Ç –≤–∫—É—Å–æ–≤"
    tpl = templates.get("main_caption")
    contact = templates.get("contact_info", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: üì© @Diana_Elfbarchik\n–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞: @Elfbarchik_Store\n–ù–∞—à –∫–∞–Ω–∞–ª: @ElfBerry_net")
    text = tpl.format(model=model_name, price=price_text, flavors=flavors_text, contact_info=contact)
    return text

# --- –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å ---
wanted = None
for k in groups.keys():
    if "VOZOL" in k.upper() or "VISTA" in k.upper() or "VOZOL/RAVE" in k.upper():
        wanted = k
        break
if not wanted:
    wanted = next(iter(groups.keys()))

logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: %s (–≤–∫—É—Å–æ–≤: %d)", wanted, len(groups[wanted]))
post = build_post_text(wanted, groups[wanted])

print("\n--- –°–û–ó–î–ê–ù–ù–´–ô –ü–û–°–¢ ---\n")
print(post)
print("\n--- –ö–û–ù–ï–¶ ---\n")
